Devember devlog:

December 1, 2016
    This is a project I've been working on for about a month now.  I thought of it after learning about OOP from
    rmotr.com's Intro to Python class (which I highly recommend). The project started out fine but quickly
    got overwhelming for this beginner.
    I think the problem was I got carried away with the many classes and objects.  It turned into a giant knot
    of classes referencing other classes and methods and imports and it got out of hand.
    Today I sat down and (physically) wrote out how a turn should play and what needed to be done in each step.
    I commented out the previous code and entered all the steps for what I need to work on next.

    There is still one problem I haven't figured out how to handle.  In the actual game of Yam Slam, there are no
    tokens for a YamSlam (getting all the same number on the dice).  If you get a Yam Slam, you are to just take the
    tile left with the most points.  Currently in the code, it checks to see if there are any tokens for a particular
    combo.  In the case of a Yam Slam, it would throw an error because I never made any tokens for a Yam Slam.  So, as
    a minor fix, I had to add 100 tokens for Yam Slam.  But I do have to figure out how to work around it.  I may
    have it check to see if the dice == a combo before it checks to see if there are any tokens.  I don't know yet.

    Goals for tomorrow:  Write the functions for a turn.  I had already done most of the work so I don't think it will
    be too difficult.




December 2
    I got the main gameplay 'working' - sort of.  There are some bugs.
        1. It doesn't switch players
        2. It takes out two tokens for a winning hand instead of one
        3. At least one hand that should have been a Large Straight was scored as a Small Straight.
        4. I got an error on what should have been a Flush.

    I suppose this means I have to start unittesting.  :( Boo.  Unittesting is large and scary to me.
    But I know it's a skill I need.  If anything, it will help me understand what I need to return.
    I think that's the problem with the score_the_roll().  I'm not sure if I'm putting through the proper parameters
    and I don't have a way of testing it yet.  Playing with the random numbers that I pass through will not get me there.
    I'm pretty sure there's something wrong with the third roll and what it's returning.

    Goals for tomorrow: Figure out what is happening with the third roll.  Figure out how to switch players.
    Start writing at least one test every day.  After pushing this, I will find a good tutorial.

December 2 - 2nd update
    Fixed the part where the Large Straight was scored as a Small Straight.

    if len(set(roll_values)) == 5:
        if 1 and 6 not in roll_values:
            return True

    This didn't work, obv. I changed it to this:

    if len(set(roll_values)) == 5:
        if 1 in roll_values and 6 in roll_values:
            return False
        else:
            return True

    Also -  If you chose to re-roll dice on the last turn, it would remove them from the roll but not reroll
    any to replace them.  That probably caused the error on the Flush. So that is fixed now.





December 3
    It seems that the more things I fix, the more problems come up.  I seemed to have fixed the player switching problem.
    At the least it passes the test I wrote.  And hey - I wrote a test!
    I still seem to have trouble scoring a roll.  Now I'm getting an error on 3 of a kind, that wasn't there before.

    I briefly took a foray into scrapping the idea that dice are objects and tried to just do numbers.  The immediate
    problem I ran into was - when the player chose to re-roll a die, it removed every instance of that number.  For example:
    roll was [1, 2, 3, 4, 4] and the player wanted to re-roll 4, what would come back was [1, 2, 3].  So I scrapped that
    and went back to having dice as objects.  Perhaps I will be able to figure it out later.

    I think what will fix the 3 of a kind error is creating parameters for the function that checks it.  I seem to have
    a large lack of parameters in my functions and it's getting messy.  That will make tests easier too, right?  Right?!

    Goals for tomorrow: Create tests for score_the_roll().  That might take all day so I'll leave it at that.




December 4
    I now have unittests written for each of the combos, which cleared up some confusion I had on parameters. Also somehow
    it fixed that 2 chips were removed for each winning roll.  Not sure how that happened.
    It still is not switching players, even though my test is working properly.
    Also I changed a flush from being dependant on color (which the user can't see anyway), to being dependant on if
    the number is even or odd.  I now have a defunct method called get_roll_colors() which I'll probably delete.

    Goals for tomorrow:  The way the program works is - it checks each combo in turn, starting with the highest points
    combo.  If there are no chips left for that combo, it will skip it and go to the next combo.  However, in real life,
    you might get pseudo combos that will fit in other categories.  For example, if you have [1, 1, 1, 1, 3], but there
    are no Four of a Kind chips left, you may choose to take a Two Pair chip, since you technically have two pairs of 1s.
    But, the game doesn't see it that way.  [1, 1, 1, 1, 3] will fail the Two Pair test.  So tomorrow I will write in
    checks for that (and tests).  If I have time I will try to figure out the player switching thing again.



December 5
    I added checks for the pseudo-combos, and in that, figured out the yam slam problem I mentioned on December 1.
    To change it, in every check combo function, I first added a check to see if it was a yam slam.  It is the same approach
    I took for the pseudo combo problem.  It seems pretty obvious now that I did it. All tests passed.
    I also wrote tests for the function that checks if the game is over.  To find out, it looks in the chips dictionary
    to see if there are any chips left.  If not, it continues the game.  If there are no chips left, it should move to
    announce the winner.  But first, that pesky player switching problem.

    Goals for tomorrow:  Player switching - for reals.



December 6
    Took entirely too long to fix the player switching thing.
    My problem was that I had the player switch inside the main game function, when it should have been in the while
    loop that keeps the game going.
    I also added player points, and a function that announces the winner.  And tests for these of course.
    I got through playing almost an entire game, and then a wrong number was typed in and it threw the whole game.
    Which brings me to...

    Goals for tomorrow: Exceptions!

December 7
    One bug I found and worked on today:
        When the game ends, it is stuck in an infinite loop announcing who is the winner.  I fixed this by
        moving check_if_game_over() from inside game() to the while loop that runs the game.
    After that I tried to work on creating exceptions, but I couldn't quite get them to work properly.  I have to
    look up a tutorial so I can understand better how exactly they work.
    I also attempted to make some tests for score_the_roll(), but had some problems getting it to run properly.  I
    think I have it formatted incorrectly but I didn't have the patience to figure it out. But I do know that it's
    something that needs to be done, because playing through the game, at least once I saw it score twice for the
    same roll.  So I need to work that out.
    The rest of the time I cleaned up the looks, added commas, time delays, tiny stuff like that.  It plays cleaner now.

    Goals for tomorrow: Figure out exceptions


December 8
    I found another bug so I spent my time fixing (or rather not fixing) that.
    On December 5 I wrote that I fixed the pseudo-combo problem - where if you have [1, 1, 1, 1, 5], and you are out
    of four of a kind chips, the game will not count that as 3 of a kind, even though it's obviously three of a kind.
    So within the three of a kind check(), I told it to go see if four of a kind check() was true.  That seemed to work.
    But when I played a game, and got the above roll, it would print out:
        You got four of a kind!
        You got three of a kind!
    So it would tell you you got both.  I tried all kinds of things to fix it, moved functions, changed order, etc, etc.
    and none of it worked.  So I had to revert all my work for the day.   Sad.
    I think it will come down to fixing that a three of a kind will recognize a four of a kind and not relying on
    the other function at all.  Fortunately I will only have to modify Three of a Kind and Two Pair.

    Goals for tomorrow: That.  And exceptions.

December 9
    Finally fixed it right.  It is a fully playable game, and it doesn't break if you type in bob or 99 as your dice
    choice.  Took me long enough.

    Goals for tomorrow: Research how I can make this a webapp.